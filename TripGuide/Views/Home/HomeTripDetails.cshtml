@using Microsoft.AspNetCore.Identity
@using TripGuide.Enums
@model TripDetailsViewModel
@inject SignInManager<IdentityUser> SignInManager

<h1 class="display-1 text-center" >Trip details @Model.Name</h1>
<div class="container text-center">
    <div class="row">
        <p class="col fs-3">Location: @Model.City, @Model.Country</p>
        <p class="col fs-3">Loves: @Model.FavoriteCount</p>
        @if (SignInManager.IsSignedIn(User))
        {
            <div class="col">
                @if (!Model.IsCreatedByCurrentUser && !Model.IsAlreadyCurrentUserFavorite)
                {
                    <form asp-controller="Favorite" asp-action="CreateFavorite" method="post" asp-route-tripId="@Model.Id" asp-route-source="@SourceEnum.TripDetails.ToString()">
                        <button class="btn btn-outline-secondary" type="submit">
                            <i class="bi bi-heart"></i>
                        </button>
                    </form>
                }
                else
                {
                    <form asp-controller="Favorite" asp-action="DeleteFavorite" method="post" asp-route-tripId="@Model.Id" asp-route-source="@SourceEnum.TripDetails.ToString()">
                        <button class="btn btn-outline-secondary" type="submit">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#ff0000" class="bi bi-heart-fill" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
                            </svg>
                        </button>
                    </form>
                }
            </div>
        }
    </div>
</div>
<div class="ms-auto me-auto" style="width: 800px; height: 600px;" id="map"></div>
<h2 class="display-2">Places to visit</h2>
<table class="table table-hover table-striped">
    <thead>
    <tr>
        <th scope="col">Order</th>
        <th scope="col">Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var placeToVisit in @Model.PlacesToVisit)
    {
        <tr>
            <td>@placeToVisit.VisitOrder</td>
            <td>@placeToVisit.Name</td>
        </tr>
    }
    </tbody>
</table>

@section Scripts
{
    <script type="text/javascript">
        async function main(){
            const cityToSearch = "@Model.City";
            const countryToSearch = "@Model.Country";
            
            const placesToVisit = @Html.Raw(Json.Serialize(Model.PlacesToVisit));
        
            const response = await fetch('https://nominatim.openstreetmap.org/search?city=' + cityToSearch + '&country=' + countryToSearch + '&format=json');
            const data = await response.json();
        
            const mapOptions = {
                center: [data[0].lat, data[0].lon],
                zoom: 11
            };
            
            const map = new L.map('map', mapOptions);
            const layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
            map.addLayer(layer);   
            
            const latlngs = [];
            
            placesToVisit.forEach(placeToVisit => {
                const marker = L.marker([placeToVisit.latitude, placeToVisit.longitude]).addTo(map);
                marker.bindPopup(placeToVisit.visitOrder.toString() + " " + placeToVisit.name.toString());  
                latlngs.push([placeToVisit.latitude, placeToVisit.longitude]);
            });
            
            L.polyline(latlngs, {color: 'red'}).addTo(map);
            
        }
        
        main();
    </script>
}